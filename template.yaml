AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: My first serverless application.

Globals:
  Function:
    Runtime: nodejs8.10
    Timeout: 300

# Values to pass to your template at runtime (when you create or update a stack).
Parameters:
  ContentBucket:
    Type: String
  ContentKey:
    Type: String
  CodeKey:
    Type: String

Resources:
  MyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: AUTHORIZER
      Name: Lifegames iOS App
      Description: The API that supports the iOS App.

  MyUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
      - ApiId: !Ref MyApi
        Stage: !Ref StageProduction
      Description: Internal consumption
      UsagePlanName: Basic

  MyUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref iOSApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref MyUsagePlan

  MyDeployment:
    DependsOn: IFTTTWebhookFeedlyMethodPost
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyApi
      Description: "My deployment"

  Account:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        "Fn::GetAtt":
        - GatewayLogRole
        - Arn

  GatewayLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [apigateway.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  StageProduction:
    DependsOn: GatewayLogRole
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      Description: Production environment
      RestApiId: !Ref MyApi
      DeploymentId: !Ref MyDeployment
      Variables:
        Stack: Prod
      MethodSettings:
      - DataTraceEnabled: true
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
        MetricsEnabled: true

  Feedly:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApi
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: "feedly"

  iOSApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: iOSAppKey
      Description: The key for the iOS App
      Enabled: true

  GatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseTemplates:
        application/json: "{\"error\":{\"code\":\"custom-4XX-generic\",\"message\":$context.error.messageString},\"requestId\":\"$context.requestId\"}"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref MyApi

  IFTTTWebhookFeedlyMethodFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/*
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FeedlyWebhook.Arn

  ListFilesMethodFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/*
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ListFiles.Arn

  IFTTTWebhookFeedlyMethodPost:
    DependsOn: FeedlyWebhook
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      #RequestParameters:
      #  method.request.header.x-api-key: true
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref MyAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        #IntegrationResponses:
        #- StatusCode: 400
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FeedlyWebhook.Arn}/invocations
      OperationName: PostFeedlyWebhook
      ResourceId: !Ref Feedly
      RestApiId: !Ref MyApi
      RequestModels:
        application/json: !Ref IFTTTWebhookFeedlyModel
      # RequestValidatorId: !Ref IFTTTWebhookFeedlyMethodPostRequestValidator
      #MethodResponses:
      #- StatusCode: 400
      #  ResponseModels:
      #    application/json: !Ref IFTTTWebhookFeedlyBadRequest

  Files:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApi
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: "files"

  ListFilesMethodGet:
    DependsOn: ListFiles
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      #RequestParameters:
      #  method.request.header.x-api-key: true
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref MyAuthorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        #IntegrationResponses:
        #- StatusCode: 400
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListFiles.Arn}/invocations
      OperationName: listFiles
      ResourceId: !Ref Files
      RestApiId: !Ref MyApi
      #RequestModels:
      #  application/json: !Ref IFTTTWebhookFeedlyModel
      # RequestValidatorId: !Ref IFTTTWebhookFeedlyMethodPostRequestValidator
      #MethodResponses:
      #- StatusCode: 400
      #  ResponseModels:
      #    application/json: !Ref IFTTTWebhookFeedlyBadRequest

  IFTTTWebhookFeedlyMethodPostRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: FeedlyMethodPostRequestValidator
      RestApiId: !Ref MyApi
      ValidateRequestBody: true

  IFTTTWebhookFeedlyBadRequest:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: A webhook from Feedly via IFTT
      Name: IFTTTWebhookBadRequest
      RestApiId: !Ref MyApi
      Schema:
        "$schema": "http://json-schema.org/draft-04/schema#"
        type: object
        required:
        - ArticleURL
        properties:
          ArticleURL:
            type: array
            items:
              type: string

  IFTTTWebhookFeedlyModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: A webhook from Feedly via IFTT
      Name: IFTTTWebhookFeedly
      RestApiId: !Ref MyApi
      Schema:
        "$schema": "http://json-schema.org/draft-04/schema#"
        type: object
        required:
        - ArticleURL
        properties:
          ArticleFirstImageURL:
            type: string
          ArticleCategories:
            type: string
          ArticlePublishedAt:
            type: string
          ArticleTitle:
            type: string
          ArticleURL:
            type: string
          CreatedAt:
            type: string
          SourceFeedURL:
            type: string
          SourceTitle:
            type: string
          SourceURL:
            type: string

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub states.${AWS::Region}.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: "*"

  RestApiAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: 'apigateway.amazonaws.com'
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: !GetAtt AuthorizationFunction.Arn

  MyAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials: !GetAtt RestApiAuthorizerRole.Arn
      AuthorizerResultTtlInSeconds: 0
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizationFunction.Arn}/invocations
      Type: REQUEST
      IdentitySource: method.request.querystring.ApiKey
      Name: DefaultAuthorizer
      RestApiId: !Ref MyApi

  MyStateMachine:
    DependsOn:
      - StartFileUpload
      - UploadPart
      - CompleteFileUpload
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub
        - |-
          {
            "Comment": "A multipart file upload via S3",
            "StartAt": "StartUpload",
            "States": {
              "StartUpload": {
                "Type" : "Task",
                "Resource": "${startFileUploadArn}",
                "Next": "UploadOrComplete"
              },
              "UploadPart": {
                "Type" : "Task",
                "Resource": "${uploadPartArn}",
                "Next": "UploadOrComplete"
              },
              "CompleteUpload": {
                "Type" : "Task",
                "Resource": "${completeFileUploadArn}",
                "End": true
              },
              "UploadOrComplete": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.bytesRemaining",
                    "NumericGreaterThan": 0,
                    "Next": "UploadPart"
                  },
                  {
                    "Variable": "$.bytesRemaining",
                    "NumericEquals": 0,
                    "Next": "CompleteUpload"
                  }
                ]
              }
            }
          }
        - {
          startFileUploadArn: !GetAtt StartFileUpload.Arn,
          uploadPartArn: !GetAtt UploadPart.Arn,
          completeFileUploadArn: !GetAtt CompleteFileUpload.Arn
        }
      RoleArn: !GetAtt StatesExecutionRole.Arn

  NodeModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: NodeModulesLayer
      Description: Base Layer for my Alexa Skills
      ContentUri:
        Bucket: !Ref ContentBucket
        Key: !Ref ContentKey
      CompatibleRuntimes:
        - nodejs6.10
        - nodejs8.10
      RetentionPolicy: Retain

  FeedlyWebhook:
    DependsOn: S3Bucket
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.handleFeedlyEvent
      Description:  A webhook from Feedly via IFTTT
      Environment:
        Variables:
          TopicArn: !Ref UploadFileTopic
          StateMachineArn: !Ref MyStateMachine
          Bucket: !Ref S3Bucket
      Layers:
        - !Ref NodeModulesLayer
      Policies:
      - SNSPublishMessagePolicy:
          TopicName: !GetAtt UploadFileTopic.TopicName
      - Statement:
        - Effect: Allow
          Action:
          - 'states:StartExecution'
          Resource:
          - !Ref MyStateMachine

  ListFiles:
    DependsOn: S3Bucket
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.listFiles
      Description:  A lambda function that lists files in S3.
      Environment:
        Variables:
          Bucket: !Ref S3Bucket
      Layers:
        - !Ref NodeModulesLayer
      Policies:
      - S3CrudPolicy:
          BucketName: !Ref S3Bucket

  StartFileUpload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.startFileUpload
      Description:  The function that starts the multipart upload.
      Layers:
        - !Ref NodeModulesLayer

  UploadPart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.uploadPart
      Description:  The function uploads a part of a multipart upload.
      Layers:
        - !Ref NodeModulesLayer

  CompleteFileUpload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.completeFileUpload
      Description:  The function that completes the multipart upload.
      Layers:
        - !Ref NodeModulesLayer

  AuthorizationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.handleAuthorization
      Description:  The function that handles authorization for the API Gateway.
      Environment:
        Variables:
          ApiKeyID: !Ref iOSApiKey
      Layers:
        - !Ref NodeModulesLayer
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - apigateway:GET
          Resource:
          - !Sub arn:aws:apigateway:${AWS::Region}::/apikeys
          - !Sub arn:aws:apigateway:${AWS::Region}::/apikeys/*
          - !Sub arn:aws:apigateway:${AWS::Region}::/usageplans
          - !Sub arn:aws:apigateway:${AWS::Region}::/usageplans/*/usage

  UploadFileTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: UploadFileTopic

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicReadWrite

Outputs:
  ApiUrl:
    Description: URL of the Prod stage of the API endpoint
    Value: !Sub "https://lifegames-app.execute-api.${AWS::Region}.amazonaws.com/Prod"
  FeedlyWebhookArn:
    Description: The ARN of the feedly webhook
    Value: !GetAtt FeedlyWebhook.Arn
  LayerARN:
    Description: The ARN for that Layer
    Value: !Ref NodeModulesLayer
    Export:
      Name: !Sub "${AWS::StackName}-LayerARN"
