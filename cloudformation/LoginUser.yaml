Resources:
  LoginUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.handleLoginUser
      Description:  Logs in a user.
      Layers:
        - !Ref NodeModulesLayer
      Policies:
        - Statement:
            - Effect: Allow
              Action: 'secretsmanager:GetSecretValue'
              Resource: !Ref SecretJWTKey
  LoginUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApi
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: "login"
  LoginUserMethodPost:
    DependsOn: LoginUser
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref MyAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginUser.Arn}/invocations
      OperationName: loginUser
      ResourceId: !Ref LoginUserResource
      RestApiId: !Ref MyApi
  LoginUserMethodFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/*
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LoginUser.Arn
  SecretJWTKey:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: SecretJWTKey
      Description: The secret for generating/validating server-issued JWTs.
      GenerateSecretString:
        IncludeSpace: false
        RequireEachIncludedType: true
        PasswordLength: 50
