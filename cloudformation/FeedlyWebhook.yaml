Resources:
  Feedly:
    DependsOn:
      - MyApi
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApi
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: "feedly"
  IFTTTWebhookFeedlyMethodPostRequestValidator:
    DependsOn:
      - MyApi
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: FeedlyMethodPostRequestValidator
      RestApiId: !Ref MyApi
      ValidateRequestBody: true
  IFTTTWebhookFeedlyMethodFunctionPermission:
    DependsOn:
      - MyApi
      - FeedlyWebhook
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/*
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FeedlyWebhook.Arn
  IFTTTWebhookFeedlyMethodPost:
    DependsOn:
      - FeedlyWebhook
      - MyAuthorizer
      - Feedly
      - MyApi
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false # because our DefaultAuthorizer requires the key
      RequestParameters:
        method.request.querystring.ApiKey: true
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref MyAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        #IntegrationResponses:
        #- StatusCode: 400
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FeedlyWebhook.Arn}/invocations
      OperationName: PostFeedlyWebhook
      ResourceId: !Ref Feedly
      RestApiId: !Ref MyApi
  FeedlyWebhook:
    DependsOn:
      - DynamoFileTable
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.handleFeedlyEvent
      Description:  A webhook from Feedly via IFTTT
      Environment:
        Variables:
          DynamoDBTable: !Ref DynamoFileTable
      Layers:
        - !Ref NodeModulesLayer
      Policies:
        - Statement:
          - Effect: Allow
            Action: 'dynamodb:UpdateItem'
            Resource: !GetAtt DynamoFileTable.Arn
      Tracing: Active
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"

  StartFileUpload:
    DependsOn:
      - DynamoFileTable
      - S3Bucket
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.startFileUpload
      Description:  The function that starts the multipart upload.
      Environment:
        Variables:
          Bucket: !Ref S3Bucket
          DynamoDBTable: !Ref DynamoFileTable
      Layers:
        - !Ref NodeModulesLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3Bucket
        - Statement:
          - Effect: Allow
            Action: 'dynamodb:UpdateItem'
            Resource: !GetAtt DynamoFileTable.Arn
      Timeout: 900
      Tracing: Active

  UploadPart:
    DependsOn:
      - S3Bucket
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.uploadFilePart
      Description:  The function uploads a part of a multipart upload.
      Layers:
        - !Ref NodeModulesLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3Bucket
      Tracing: Active

  CompleteFileUpload:
    DependsOn:
      - S3Bucket
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.completeFileUpload
      Description:  The function that completes the multipart upload.
      Environment:
        Variables:
          DynamoDBTable: !Ref DynamoFileTable
      Layers:
        - !Ref NodeModulesLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3Bucket
        - Statement:
          - Effect: Allow
            Action: 'dynamodb:UpdateItem'
            Resource: !GetAtt DynamoFileTable.Arn
      Tracing: Active
  MyStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
  MyStateMachine:
    DependsOn:
      - StartFileUpload
      - UploadPart
      - CompleteFileUpload
      - StatesExecutionRole
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "Comment": "A multipart file upload via S3",
          "StartAt": "StartUpload",
          "States": {
            "StartUpload": {
              "Type" : "Task",
              "Resource": "${StartFileUpload.Arn}",
              "TimeoutSeconds": 900,
              "HeartbeatSeconds": 600,
              "Next": "UploadOrComplete"
            },
            "UploadPart": {
              "Type" : "Task",
              "Resource": "${UploadPart.Arn}",
              "Next": "UploadOrComplete"
            },
            "CompleteUpload": {
              "Type" : "Task",
              "Resource": "${CompleteFileUpload.Arn}",
              "End": true
            },
            "UploadOrComplete": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.bytesRemaining",
                  "NumericGreaterThan": 0,
                  "Next": "UploadPart"
                },
                {
                  "Variable": "$.bytesRemaining",
                  "NumericEquals": 0,
                  "Next": "CompleteUpload"
                }
              ]
            }
          }
        }
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt MyStateMachineLogGroup.Arn
        IncludeExecutionData: FALSE
        Level: ALL
  DynamoFileTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: fileId
          AttributeType: S
      KeySchema:
        - AttributeName: fileId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: Files
