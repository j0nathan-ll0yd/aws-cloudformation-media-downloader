Resources:
  Feedly:
    DependsOn:
      - MyApi
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApi
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: "feedly"
  IFTTTWebhookFeedlyMethodPostRequestValidator:
    DependsOn:
      - MyApi
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: FeedlyMethodPostRequestValidator
      RestApiId: !Ref MyApi
      ValidateRequestBody: true
  IFTTTWebhookFeedlyMethodFunctionPermission:
    DependsOn:
      - MyApi
      - FeedlyWebhook
    Type: AWS::Lambda::Permission
    Properties:
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/*
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FeedlyWebhook.Arn
  IFTTTWebhookFeedlyMethodPost:
    DependsOn:
      - FeedlyWebhook
      - MyAuthorizer
      - Feedly
      - MyApi
      - IFTTTWebhookFeedlyModel
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false # because our DefaultAuthorizer requires the key
      RequestParameters:
        method.request.querystring.ApiKey: true
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref MyAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        #IntegrationResponses:
        #- StatusCode: 400
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FeedlyWebhook.Arn}/invocations
      OperationName: PostFeedlyWebhook
      ResourceId: !Ref Feedly
      RestApiId: !Ref MyApi
      RequestModels:
        application/json: !Ref IFTTTWebhookFeedlyModel
      # RequestValidatorId: !Ref IFTTTWebhookFeedlyMethodPostRequestValidator
      MethodResponses:
      - StatusCode: 400
        ResponseModels:
          application/json: !Ref IFTTTWebhookFeedlyBadRequest
  IFTTTWebhookFeedlyBadRequest:
    DependsOn:
      - MyApi
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: A webhook from Feedly via IFTT
      Name: IFTTTWebhookBadRequest
      RestApiId: !Ref MyApi
      Schema:
        "$schema": "http://json-schema.org/draft-04/schema#"
        type: object
        required:
          - ArticleURL
        properties:
          ArticleURL:
            type: array
            items:
              type: string
  IFTTTWebhookFeedlyModel:
    DependsOn:
      - MyApi
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: A webhook from Feedly via IFTT
      Name: IFTTTWebhookFeedly
      RestApiId: !Ref MyApi
      Schema:
        "$schema": "http://json-schema.org/draft-04/schema#"
        type: object
        title: A proper title
        description: A property description
        required:
          - ArticleURL
        minProperties: 1
        maxProperties: 9
        properties:
          ArticleFirstImageURL:
            type: string
            format: uri
          ArticleCategories:
            type: string
          ArticlePublishedAt:
            type: string
            format: date-time
          ArticleTitle:
            type: string
          ArticleURL:
            type: string
            format: uri
            description: The URL of the YouTube video to download
          CreatedAt:
            type: string
            format: date-time
          SourceFeedURL:
            type: string
            format: uri
          SourceTitle:
            type: string
          SourceURL:
            type: string
            format: uri
  FeedlyWebhook:
    DependsOn:
      - S3Bucket
      - MyStateMachine
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.handleFeedlyEvent
      Description:  A webhook from Feedly via IFTTT
      Environment:
        Variables:
          StateMachineArn: !Ref MyStateMachine
      Layers:
        - !Ref NodeModulesLayer
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'states:StartExecution'
              Resource:
                - !Ref MyStateMachine
      Tracing: Active
  FeedlyWebhookRequestBodyDocPart:
    DependsOn:
      - MyApi
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: REQUEST_BODY
        Path: "/feedly"
        Method: POST
      RestApiId: !Ref MyApi
      Properties: >+
        {
          "ArticleFirstImageURL": "https://i.ytimg.com/vi/ZfVMalJEHRw/maxresdefault.jpg",
          "ArticleCategories": "YouTube",
          "ArticlePublishedAt": "July 4, 2018 at 03:27PM",
          "ArticleTitle": "Why People Are Freaking Out At Scarlett Johansson, Poland Purge Controversy, & American Pride Dips",
          "ArticleURL": "https://www.youtube.com/watch?v=K1HTMYxjF5Y",
          "CreatedAt": "July 4, 2018 at 04:02PM",
          "SourceFeedURL": "https://www.youtube.com/playlist?list=UUlFSU9_bUb4Rc6OYfTt5SPw",
          "SourceTitle": "Philip DeFranco (uploads) on YouTube",
          "SourceURL": "https://youtube.com/playlist?list=UUlFSU9_bUb4Rc6OYfTt5SPw"
        }
  FeedlyWebhookResponse202DocPart:
    DependsOn:
      - MyApi
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: RESPONSE
        Path: "/feedly"
        Method: POST
        StatusCode: 202
      RestApiId: !Ref MyApi
      Properties: >+
        {
          "body": {
            "status": "OK"
          },
          "requestId": "b127ec8a-203a-4105-801f-c98d670985d1"
        }
  QueryParameterApiKey:
    DependsOn:
      - MyApi
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: QUERY_PARAMETER
        Path: "/files"
        Method: POST
        Name: "LalaKey"
      RestApiId: !Ref MyApi
      Properties: >+
        {
          "description": "The LaLa Key"
        }
  DocumentationVersion:
    DependsOn:
      - MyApi
      - FeedlyWebhookResponse202DocPart
      - FeedlyWebhookRequestBodyDocPart
      - QueryParameterApiKey
    Type: AWS::ApiGateway::DocumentationVersion
    Properties:
      Description: The description of the API documentation snapshot.
      DocumentationVersion: 1.0.1
      RestApiId: !Ref MyApi
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  StartFileUpload:
    DependsOn:
      - S3Bucket
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.startFileUpload
      Description:  The function that starts the multipart upload.
      Environment:
        Variables:
          Bucket: !Ref S3Bucket
      Layers:
        - !Ref NodeModulesLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3Bucket
      Timeout: 900
      Tracing: Active

  UploadPart:
    DependsOn:
      - S3Bucket
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.uploadFilePart
      Description:  The function uploads a part of a multipart upload.
      Layers:
        - !Ref NodeModulesLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3Bucket
      Tracing: Active

  CompleteFileUpload:
    DependsOn:
      - S3Bucket
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref ContentBucket
        Key: !Ref CodeKey
      Handler: dist/main.completeFileUpload
      Description:  The function that completes the multipart upload.
      Layers:
        - !Ref NodeModulesLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3Bucket
      Tracing: Active
  MyStateMachine:
    DependsOn:
      - StartFileUpload
      - UploadPart
      - CompleteFileUpload
      - StatesExecutionRole
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |-
        {
          "Comment": "A multipart file upload via S3",
          "StartAt": "StartUpload",
          "States": {
            "StartUpload": {
              "Type" : "Task",
              "Resource": "${StartFileUpload.Arn}",
              "Next": "UploadOrComplete"
            },
            "UploadPart": {
              "Type" : "Task",
              "Resource": "${UploadPart.Arn}",
              "Next": "UploadOrComplete"
            },
            "CompleteUpload": {
              "Type" : "Task",
              "Resource": "${CompleteFileUpload.Arn}",
              "End": true
            },
            "UploadOrComplete": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.bytesRemaining",
                  "NumericGreaterThan": 0,
                  "Next": "UploadPart"
                },
                {
                  "Variable": "$.bytesRemaining",
                  "NumericEquals": 0,
                  "Next": "CompleteUpload"
                }
              ]
            }
          }
        }
